import BILL from '../models/BILL.js';
import TheoDoiMuonSach from '../models/THEODOIMUONSACH.js';
import DOCGIA from '../models/DOCGIA.js';
import Package from '../models/Package.js';
import BanSaoSach from '../models/BanSaoSach.js';
import SACH from '../models/SACH.js';
import Counter from '../models/Counter.js';
import { generatePaymentUrl, verifyReturnUrl } from '../utils/vnpayService.js';

const generateMaBill = async () => {
    const counter = await Counter.findOneAndUpdate(
        { _id: 'maBill' },
        { $inc: { seq: 1 } },
        { new: true, upsert: true }
    );
    const seqNumber = counter.seq.toString().padStart(6, '0');
    return `BILL${seqNumber}`;
};

const generateMaPhieu = async () => {
    const counter = await Counter.findOneAndUpdate(
        { _id: 'maMuonSach' },
        { $inc: { seq: 1 } },
        { new: true, upsert: true }
    );
    const seqNumber = counter.seq.toString().padStart(6, '0');
    return `PM${seqNumber}`;
};

const generateMaGD = async () => {
    const counter = await Counter.findOneAndUpdate(
        { _id: 'maGiaoDich' },
        { $inc: { seq: 1 } },
        { new: true, upsert: true }
    );
    const seqNumber = counter.seq.toString().padStart(6, '0');
    return `GD${seqNumber}`;
};

// NGUY√äN T·∫ÆC:
// 1. VNPAY (online): KH√îNG t·∫°o g√¨ cho ƒë·∫øn khi SUCCESS callback
// 2. CASH: CH·ªà d√πng cho th·ªß th∆∞ t·∫°o tr·ª±c ti·∫øp t·∫°i qu·∫ßy
//          Web client KH√îNG ƒë∆∞·ª£c ph√©p t·∫°o bill CASH
// ================================================

const checkBillThanhToan = async (req, res, next) => {
    try {
        const { MADOCGIA, LIST_MA_BANSAO, LOAITHANHTOAN } = req.body;
        
        // Validate ƒë·∫ßu v√†o
        if (!LIST_MA_BANSAO || LIST_MA_BANSAO.length === 0) {
            const error = new Error('Danh s√°ch b·∫£n sao tr·ªëng');
            error.status = 400;
            return next(error);
        }
        
        // Web client CH·ªà ƒë∆∞·ª£c ph√©p d√πng VNPAY (online)
        if (LOAITHANHTOAN !== 'online') {
            const error = new Error('Ch·ªâ h·ªó tr·ª£ thanh to√°n VNPAY (online) qua web');
            error.status = 400;
            return next(error);
        }
        
        // L·∫•y th√¥ng tin ƒë·ªôc gi·∫£ v√† g√≥i
        const docGia = await DOCGIA.findOne({ MADOCGIA });
        if (!docGia) {
            const error = new Error('ƒê·ªôc gi·∫£ kh√¥ng t·ªìn t·∫°i');
            error.status = 404;
            return next(error);
        }
        
        const packageInfo = await Package.findOne({ MaGoi: docGia.GOI.MaGoi });
        if (!packageInfo) {
            const error = new Error('G√≥i d·ªãch v·ª• kh√¥ng t·ªìn t·∫°i');
            error.status = 404;
            return next(error);
        }
        
        // Ki·ªÉm tra g√≥i c√≥ h·∫øt h·∫°n kh√¥ng
        const now = new Date();
        const ngayHetHan = new Date(docGia.GOI.NgayHetHan);
        if (now > ngayHetHan) {
            const error = new Error('G√≥i d·ªãch v·ª• ƒë√£ h·∫øt h·∫°n. Vui l√≤ng gia h·∫°n g√≥i ƒë·ªÉ ti·∫øp t·ª•c m∆∞·ª£n s√°ch');
            error.status = 403;
            return next(error);
        }
        
        // Ki·ªÉm tra gi·ªõi h·∫°n m∆∞·ª£n
        const sachMuonHienTai = await TheoDoiMuonSach.countDocuments({
            MADOCGIA,
            TINHTRANG: 'borrowing'
        });
        
        const tongSachMuon = sachMuonHienTai + LIST_MA_BANSAO.length;
        if (tongSachMuon > packageInfo.SoSachToiDa) {
            const error = new Error(
                `V∆∞·ª£t qu√° gi·ªõi h·∫°n m∆∞·ª£n. Hi·ªán t·∫°i: ${sachMuonHienTai}, mu·ªën th√™m: ${LIST_MA_BANSAO.length}, t·ªëi ƒëa: ${packageInfo.SoSachToiDa}`
            );
            error.status = 400;
            return next(error);
        }
        
        // Validate t·∫•t c·∫£ b·∫£n sao
        let tongTien = 0;
        for (const MA_BANSAO of LIST_MA_BANSAO) {
            const banSao = await BanSaoSach.findOne({ MA_BANSAO });
            
            if (!banSao) {
                const error = new Error(`B·∫£n sao ${MA_BANSAO} kh√¥ng t·ªìn t·∫°i`);
                error.status = 404;
                return next(error);
            }
            
            // HARD LOCK: S√°ch ƒë√£ ƒë∆∞·ª£c m∆∞·ª£n (c√≥ phi·∫øu m∆∞·ª£n)
            if (banSao.TRANGTHAI === true) {
                const error = new Error(`B·∫£n sao ${MA_BANSAO} ƒë√£ ƒë∆∞·ª£c m∆∞·ª£n`);
                error.status = 400;
                return next(error);
            }
            
            // SOFT LOCK: S√°ch ƒëang ch·ªù thanh to√°n c·ªßa user kh√°c
            if (banSao.PENDING_BILL && banSao.PENDING_BILL !== '') {
                const error = new Error(`B·∫£n sao ${MA_BANSAO} ƒëang ƒë∆∞·ª£c gi·ªØ ch·ªó b·ªüi ƒë∆°n kh√°c. Vui l√≤ng ch·ªçn b·∫£n sao kh√°c.`);
                error.status = 400;
                return next(error);
            }
            
            const sach = await SACH.findOne({ MASACH: banSao.MASACH });
            if (!sach) {
                const error = new Error(`S√°ch ${banSao.MASACH} kh√¥ng t·ªìn t·∫°i`);
                error.status = 404;
                return next(error);
            }
            
            tongTien += sach.DONGIA || 0;
        }
        
        const maGD = await generateMaGD();
        
        // T·∫°o URL thanh to√°n VNPay
        let ipAddr = req.headers['x-forwarded-for'] || 
                     req.connection.remoteAddress || 
                     req.socket.remoteAddress ||
                     '127.0.0.1';
        
        // VNPay ch·ªâ h·ªó tr·ª£ IPv4, chuy·ªÉn IPv6 v·ªÅ IPv4
        if (ipAddr && ipAddr.includes('::')) {
            // IPv6 localhost ‚Üí IPv4 localhost
            if (ipAddr === '::1' || ipAddr.startsWith('::ffff:')) {
                ipAddr = ipAddr.replace('::ffff:', '');
            } else {
                ipAddr = '127.0.0.1';
            }
        }
        
        // L·∫•y IP ƒë·∫ßu ti√™n n·∫øu c√≥ nhi·ªÅu (x-forwarded-for)
        if (ipAddr && ipAddr.includes(',')) {
            ipAddr = ipAddr.split(',')[0].trim();
        }
        
        console.log('üåê Client IP:', ipAddr);
        
        // VNPay KH√îNG h·ªó tr·ª£ ti·∫øng Vi·ªát c√≥ d·∫•u trong orderInfo
        const orderInfo = `Thanh ${tongTien} VND cho giao dich - GDID: ${maGD}`;
        const paymentUrl = generatePaymentUrl(
            maGD,
            tongTien,
            orderInfo,
            ipAddr
        );
        
        res.json({
            requirePayment: true,
            paymentUrl: paymentUrl,
            expiresIn: '15 ph√∫t',
            warning: 'Bill s·∫Ω t·ª± ƒë·ªông h·ªßy n·∫øu kh√¥ng thanh to√°n trong 15 ph√∫t. S√°ch ch∆∞a ƒë∆∞·ª£c lock.'
        });
        
    } catch (error) {
        next(error);
    }
};

const createBill = async (req, res, next) => {
    try {
        const { MADOCGIA, LIST_MA_BANSAO, LOAITHANHTOAN } = req.body;
        console.log(MADOCGIA, LIST_MA_BANSAO, LOAITHANHTOAN);
        if(!MADOCGIA || !LIST_MA_BANSAO || LIST_MA_BANSAO.length === 0 || !LOAITHANHTOAN) {
            const error = new Error('Th√¥ng tin thanh to√°n kh√¥ng h·ª£p l·ªá!');
            error.status = 400;
            return next(error);
        }
        //ki·ªÉm tra v√† l·∫•y th√¥ng tin ƒë·ªôc gi·∫£ + g√≥i
        const docGia = await DOCGIA.findOne({ MADOCGIA });
        if (!docGia) {
            const error = new Error('ƒê·ªôc gi·∫£ kh√¥ng t·ªìn t·∫°i');
            error.status = 404;
            return next(error);
        }
        const packageInfo = await Package.findOne({ MaGoi: docGia.GOI.MaGoi });
        if (!packageInfo) {
            const error = new Error('G√≥i d·ªãch v·ª• kh√¥ng t·ªìn t·∫°i');
            error.status = 404;
            return next(error);
        }
        //validate v√† l·∫•y th√¥ng tin b·∫£n sao
        let tongTien = 0;
        for (const MA_BANSAO of LIST_MA_BANSAO) {
            const banSao = await BanSaoSach.findOne({ MA_BANSAO });
            if (!banSao) {
                const error = new Error(`B·∫£n sao ${MA_BANSAO} kh√¥ng t·ªìn t·∫°i`);
                error.status = 404;
                return next(error);
            }  
            const sach = await SACH.findOne({ MASACH: banSao.MASACH });
            if (!sach) {
                const error = new Error(`S√°ch ${banSao.MASACH} kh√¥ng t·ªìn t·∫°i`); 
                error.status = 404;
                return next(error);
            }
            if(banSao.TRANGTHAI === true) {
                const error = new Error(`C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh x·ª≠ l√≠ m∆∞·ª£n s√°ch`);
                error.status = 400;
                return next(error);
            }
            tongTien += sach.DONGIA || 0;
        }


        //t·∫°o phi·∫øu m∆∞·ª£n cho t·∫•t c·∫£ b·∫£n sao ·ªü tr·∫°ng th√°i waiting
        // T·∫°o phi·∫øu m∆∞·ª£n cho t·∫•t c·∫£ b·∫£n sao ·ªü tr·∫°ng th√°i waiting
        const phieuMuonPromises = LIST_MA_BANSAO.map(async (MA_BANSAO) => {
            const MAPHIEU = await generateMaPhieu();
            const NGAYMUON = new Date();
            const NGAYHANTRA = new Date();
            // Ng√†y h·∫°n tr·∫£ t√≠nh theo g√≥i
            NGAYHANTRA.setDate(NGAYHANTRA.getDate() + packageInfo.ThoiHanMuon);
            
            // T√¨m gi√° s√°ch
            const banSao = await BanSaoSach.findOne({ MA_BANSAO });
            const sach = await SACH.findOne({ MASACH: banSao.MASACH });
            
            // T·∫°o phi·∫øu m∆∞·ª£n
            const phieuMuon = new TheoDoiMuonSach({
                MAPHIEU,
                MADOCGIA,
                MA_BANSAO,
                NGAYMUON,
                NGAYHANTRA,
                GIA: sach.DONGIA || 0,
                TRANGTHAISACH: banSao.TINHTRANG,
                TINHTRANG: 'waiting'
            });
            
            // Lock s√°ch (hard lock)
            await BanSaoSach.findOneAndUpdate(
                { MA_BANSAO },
                { TRANGTHAI: true }
            );
            
            // L∆∞u phi·∫øu m∆∞·ª£n
            await phieuMuon.save();
            
            console.log('‚úÖ Created phi·∫øu m∆∞·ª£n:', MAPHIEU);
            
            return MAPHIEU;
        });

        // Ch·ªù t·∫•t c·∫£ phi·∫øu m∆∞·ª£n ƒë∆∞·ª£c t·∫°o xong
        const DANHSACHPHIEU = await Promise.all(phieuMuonPromises);

        console.log('üìã Danh s√°ch phi·∫øu:', DANHSACHPHIEU);

        const MABILL = await generateMaBill();
        //t·∫°o bill m·ªõi
        const newBill = new BILL({
            MABILL,
            MADOCGIA,
            DANHSACHPHIEU,
            TONGTIEN: tongTien,
            TRANGTHAI: true,
            LOAITHANHTOAN,
            GOI: docGia.GOI.MaGoi
        });
        console.log(newBill);
        await newBill.save();

        res.json({
            status: 'success',
            message: 'T·∫°o bill th√†nh c√¥ng',
            data: newBill
        });
    } catch (error) {
        next(error);
    }
}

// L·∫•y th√¥ng tin bill theo m√£
const getBillById = async (req, res, next) => {
    try {
        const { MABILL } = req.params;
        
        const bill = await BILL.findOne({ MABILL });
        if (!bill) {
            const error = new Error('Bill kh√¥ng t·ªìn t·∫°i');
            error.status = 404;
            return next(error);
        }
        
        // L·∫•y th√¥ng tin c√°c phi·∫øu m∆∞·ª£n (n·∫øu c√≥)
        let phieuDetails = [];
        if (bill.DANHSACHPHIEU && bill.DANHSACHPHIEU.length > 0) {
            const phieuMuonList = await TheoDoiMuonSach.find({
                MAPHIEU: { $in: bill.DANHSACHPHIEU }
            });
            
            phieuDetails = await Promise.all(
                phieuMuonList.map(async (phieu) => {
                    const banSao = await BanSaoSach.findOne({ MA_BANSAO: phieu.MA_BANSAO });
                    const sach = banSao ? await SACH.findOne({ MASACH: banSao.MASACH }) : null;
                    
                    return {
                        MAPHIEU: phieu.MAPHIEU,
                        MA_BANSAO: phieu.MA_BANSAO,
                        NGAYMUON: phieu.NGAYMUON,
                        NGAYHANTRA: phieu.NGAYHANTRA,
                        GIA: phieu.GIA,
                        TINHTRANG: phieu.TINHTRANG,
                        SACH: sach ? {
                            MASACH: sach.MASACH,
                            TENSACH: sach.TENSACH,
                            TACGIA: sach.TACGIA,
                            HINHANH: sach.HINHANH
                        } : null
                    };
                })
            );
        }
        
        res.json({
            status: 'success',
            message: 'L·∫•y th√¥ng tin bill th√†nh c√¥ng',
            data: {
                ...bill.toObject(),
                PHIEUMUON: phieuDetails
            }
        });
    } catch (error) {
        next(error);
    }
};

// L·∫•y t·∫•t c·∫£ bill c·ªßa ƒë·ªôc gi·∫£
const getBillsByDocGia = async (req, res, next) => {
    try {
        const { MADOCGIA } = req.params;
        
        const bills = await BILL.find({ MADOCGIA }).sort({ NGAYLAP: -1 });
        
        res.json({
            status: 'success',
            message: 'L·∫•y danh s√°ch bill th√†nh c√¥ng',
            data: bills
        });
    } catch (error) {
        next(error);
    }
};

// L·∫•y danh s√°ch bills ch·ªù x√°c nh·∫≠n (CASH, ch∆∞a thanh to√°n, ch∆∞a h·∫øt h·∫°n)

// Cleanup job: X√≥a bills h·∫øt h·∫°n (ch·∫°y ƒë·ªãnh k·ª≥)
const cleanupExpiredBills = async () => {
    try {
        const now = new Date();
        
        // T√¨m bills h·∫øt h·∫°n
        const expiredBills = await BILL.find({
            TRANGTHAI: false,
            'METADATA.expiresAt': { $lt: now }
        });
        
        // L·∫•y danh s√°ch MABILL
        const expiredBillIds = expiredBills.map(b => b.MABILL);
        
        if (expiredBillIds.length === 0) {
            console.log('üßπ Cleanup: Kh√¥ng c√≥ bills h·∫øt h·∫°n');
            return 0;
        }
        
        // Clear soft lock cho c√°c s√°ch c·ªßa bills h·∫øt h·∫°n
        await BanSaoSach.updateMany(
            { PENDING_BILL: { $in: expiredBillIds } },
            { PENDING_BILL: null }
        );
        
        // X√≥a bills h·∫øt h·∫°n
        const result = await BILL.deleteMany({
            MABILL: { $in: expiredBillIds }
        });
        
        console.log(`üßπ Cleanup: ƒê√£ x√≥a ${result.deletedCount} bills h·∫øt h·∫°n v√† clear soft lock`);
        return result.deletedCount;
    } catch (error) {
        console.error('‚ùå Error cleaning up expired bills:', error);
        throw error;
    }
};

export default {
    createBill,
    checkBillThanhToan,
    getBillById,
    getBillsByDocGia,
    cleanupExpiredBills
};
